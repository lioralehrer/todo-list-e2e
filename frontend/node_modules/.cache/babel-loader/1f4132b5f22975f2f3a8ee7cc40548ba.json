{"ast":null,"code":"import $ from 'jquery'; // Django requires adding CSRF token\n\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n\nfunction getCookie(name) {\n  var cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = $.trim(cookies[i]); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nvar csrftoken = getCookie('csrftoken');\n$.ajaxSetup({\n  beforeSend: function (xhr, settings) {\n    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n    }\n  }\n});\nexport function getTasks(successCallback, errorCallback) {\n  $.ajax({\n    type: \"GET\",\n    url: \"/tasks\",\n    dataType: \"json\",\n    success: successCallback,\n    error: errorCallback\n  });\n}\nexport function createTask(task, successCallback, errorCallback) {\n  $.ajax({\n    type: \"POST\",\n    url: \"/tasks/create\",\n    contentType: \"application/json\",\n    data: JSON.stringify(task),\n    success: successCallback,\n    error: errorCallback\n  });\n}","map":{"version":3,"sources":["C:\\Users\\USER\\projects\\todo-list-e2e\\frontend\\src\\utils\\todoApi.js"],"names":["$","csrfSafeMethod","method","test","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","csrftoken","ajaxSetup","beforeSend","xhr","settings","type","crossDomain","setRequestHeader","getTasks","successCallback","errorCallback","ajax","url","dataType","success","error","createTask","task","contentType","data","JSON","stringify"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd,C,CAEA;;AACA,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC5B;AACA,SAAQ,6BAA6BC,IAA7B,CAAkCD,MAAlC,CAAR;AACH;;AAED,SAASE,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,QAAIC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAIH,MAAM,GAAGR,CAAC,CAACa,IAAF,CAAOJ,OAAO,CAACE,CAAD,CAAd,CAAb,CADqC,CAErC;;AACA,UAAIH,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAA0CP,IAAI,GAAG,GAArD,EAA2D;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAON,WAAP;AACH;;AAED,IAAIU,SAAS,GAAGZ,SAAS,CAAC,WAAD,CAAzB;AAEAJ,CAAC,CAACiB,SAAF,CAAY;AACRC,EAAAA,UAAU,EAAE,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AACjC,QAAI,CAACnB,cAAc,CAACmB,QAAQ,CAACC,IAAV,CAAf,IAAkC,CAAC,KAAKC,WAA5C,EAAyD;AACrDH,MAAAA,GAAG,CAACI,gBAAJ,CAAqB,aAArB,EAAoCP,SAApC;AACH;AACJ;AALO,CAAZ;AAQA,OAAO,SAASQ,QAAT,CAAkBC,eAAlB,EAAmCC,aAAnC,EAAkD;AACrD1B,EAAAA,CAAC,CAAC2B,IAAF,CAAO;AACHN,IAAAA,IAAI,EAAE,KADH;AAEHO,IAAAA,GAAG,EAAE,QAFF;AAGHC,IAAAA,QAAQ,EAAE,MAHP;AAIHC,IAAAA,OAAO,EAAEL,eAJN;AAKHM,IAAAA,KAAK,EAAEL;AALJ,GAAP;AAOH;AAED,OAAO,SAASM,UAAT,CAAoBC,IAApB,EAA0BR,eAA1B,EAA2CC,aAA3C,EAA0D;AAC7D1B,EAAAA,CAAC,CAAC2B,IAAF,CAAO;AACHN,IAAAA,IAAI,EAAE,MADH;AAEHO,IAAAA,GAAG,EAAE,eAFF;AAGHM,IAAAA,WAAW,EAAE,kBAHV;AAIHC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAJH;AAKHH,IAAAA,OAAO,EAAEL,eALN;AAMHM,IAAAA,KAAK,EAAEL;AANJ,GAAP;AAQH","sourcesContent":["import $ from 'jquery'\r\n\r\n// Django requires adding CSRF token\r\nfunction csrfSafeMethod(method) {\r\n    // these HTTP methods do not require CSRF protection\r\n    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));\r\n}\r\n\r\nfunction getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = $.trim(cookies[i]);\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nvar csrftoken = getCookie('csrftoken');\r\n\r\n$.ajaxSetup({\r\n    beforeSend: function (xhr, settings) {\r\n        if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\r\n            xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\r\n        }\r\n    }\r\n});\r\n\r\nexport function getTasks(successCallback, errorCallback) {\r\n    $.ajax({\r\n        type: \"GET\",\r\n        url: \"/tasks\",\r\n        dataType: \"json\",\r\n        success: successCallback,\r\n        error: errorCallback\r\n    });\r\n}\r\n\r\nexport function createTask(task, successCallback, errorCallback) {\r\n    $.ajax({\r\n        type: \"POST\",\r\n        url: \"/tasks/create\",\r\n        contentType: \"application/json\",\r\n        data: JSON.stringify(task),\r\n        success: successCallback,\r\n        error: errorCallback\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}