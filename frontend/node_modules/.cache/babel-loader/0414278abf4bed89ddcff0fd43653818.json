{"ast":null,"code":"/* Copyright (c) 2018 Hampus Joakim Nilsson\n * Licensed via the MIT license.\n **/\n// Unique counter per COMPONENT that uniqueness is added to\nvar _globallyUniqueIdCounter = 0;\n\nfunction resetUniqueIds() {\n  _globallyUniqueIdCounter = 0;\n}\n\nfunction injectUniqueness(component) {\n  var instanceId;\n\n  if (arguments.length > 1) {\n    instanceId = arguments[1];\n\n    if (typeof instanceId !== 'string') {\n      console.log('Warning: Expected string as second argument passed to `injectUniqueness`');\n      instanceId = '' + instanceId;\n    }\n  } // Store all state in the closure for the member functions\n\n\n  var _render = component.render;\n  var _htmlIds = {};\n  var _uniqueIdCounter = 0;\n\n  var _uniqueInstance = instanceId || ++_globallyUniqueIdCounter; // Inject the following functions into the component\n\n\n  component.render = function () {\n    _uniqueIdCounter = 0;\n    return _render.apply(component);\n  };\n\n  component.nextUniqueId = function () {\n    ++_uniqueIdCounter;\n    return 'id-' + _uniqueInstance + '-' + _uniqueIdCounter;\n  };\n\n  component.lastUniqueId = function () {\n    return 'id-' + _uniqueInstance + '-' + _uniqueIdCounter;\n  };\n\n  component.getUniqueId = function (identifier) {\n    if (typeof identifier !== 'string') {\n      console.log('Warning: Expected string identifer passed to `getUniqueId`');\n      identifier = '' + identifier;\n    }\n\n    if (!_htmlIds[identifier]) {\n      _htmlIds[identifier] = 'id-' + _uniqueInstance + '-' + identifier;\n    }\n\n    return _htmlIds[identifier];\n  };\n}\n\nmodule.exports = {\n  resetUniqueIds: resetUniqueIds,\n  enableUniqueIds: injectUniqueness\n};","map":null,"metadata":{},"sourceType":"script"}